import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import '../../screens/home/model/product_model.dart';
import '../../generated/l10n.dart';
import 'services_supabase.dart';

class ProductService {
  static const String _tableName = 'products';
  static const String _bucketName = 'product-images';

  /// Upload ·∫£nh t·ª´ assets l√™n Supabase Storage
  static Future<String> uploadImageFromAssets(
      String assetPath, String fileName) async {
    try {
      // Load ·∫£nh t·ª´ assets
      final ByteData data = await rootBundle.load(assetPath);
      final Uint8List bytes = data.buffer.asUint8List();

      // Upload l√™n Supabase Storage
      final String imageUrl = await SupabaseService.uploadFile(
        bucket: _bucketName,
        path: 'products/$fileName',
        fileBytes: bytes,
        metadata: {
          'content-type': 'image/png',
        },
      );

      return imageUrl;
    } catch (e) {
      debugPrint('L·ªói upload ·∫£nh $assetPath: $e');
      rethrow;
    }
  }

  /// Upload ·∫£nh t·ª´ bytes l√™n Supabase Storage (cho web platform)
  static Future<String> uploadImageFromBytes(
      Uint8List imageBytes, String fileName) async {
    try {
      final String imageUrl = await SupabaseService.uploadFile(
        bucket: _bucketName,
        path: 'products/$fileName',
        fileBytes: imageBytes,
        metadata: {
          'content-type': 'image/png',
        },
      );

      return imageUrl;
    } catch (e) {
      debugPrint('L·ªói upload ·∫£nh t·ª´ bytes: $e');
      rethrow;
    }
  }

  static Future<String> uploadImageFromFile(
      File imageFile, String fileName) async {
    try {
      final Uint8List bytes = await imageFile.readAsBytes();

      final String imageUrl = await SupabaseService.uploadFile(
        bucket: _bucketName,
        path: 'products/$fileName',
        fileBytes: bytes,
        metadata: {
          'content-type': 'image/png',
        },
      );

      return imageUrl;
    } catch (e) {
      debugPrint('L·ªói upload file ·∫£nh: $e');
      rethrow;
    }
  }

  /// Th√™m s·∫£n ph·∫©m m·ªõi v√†o Supabase
  static Future<Map<String, dynamic>> addProduct({
    required Product product,
    required String category,
    required int categoryId,
    String? imageAssetPath,
    File? imageFile,
    Uint8List? imageBytes,
    bool isBestSeller = false,
  }) async {
    try {
      String? imageUrl;
      String? imagePath;

      // Upload ·∫£nh n·∫øu c√≥
      if (imageAssetPath != null) {
        final fileName =
            'product_${product.id}_${DateTime.now().millisecondsSinceEpoch}.png';
        imageUrl = await uploadImageFromAssets(imageAssetPath, fileName);
        imagePath = 'products/$fileName';
      } else if (imageFile != null) {
        final fileName =
            'product_${product.id}_${DateTime.now().millisecondsSinceEpoch}.png';
        imageUrl = await uploadImageFromFile(imageFile, fileName);
        imagePath = 'products/$fileName';
      } else if (imageBytes != null) {
        final fileName =
            'product_${product.id}_${DateTime.now().millisecondsSinceEpoch}.png';
        imageUrl = await uploadImageFromBytes(imageBytes, fileName);
        imagePath = 'products/$fileName';
      }

      // Th√™m s·∫£n ph·∫©m v√†o database
      final response = await SupabaseService.from(_tableName)
          .insert({
            'name': product.name,
            'name_english': product.nameEnglish,
            'country': product.country,
            'price': product.price,
            'image_url': imageUrl,
            'image_path': imagePath,
            'category': category,
            'category_id': categoryId,
            'is_best_seller': isBestSeller,
            'is_active': true, // M·∫∑c ƒë·ªãnh s·∫£n ph·∫©m m·ªõi l√† active
            'created_at': DateTime.now().toIso8601String(),
            'updated_at': DateTime.now().toIso8601String(),
          })
          .select()
          .single();

      debugPrint('Th√™m s·∫£n ph·∫©m th√†nh c√¥ng: ${product.name}');
      return response;
    } catch (e) {
      debugPrint('L·ªói th√™m s·∫£n ph·∫©m ${product.name}: $e');
      rethrow;
    }
  }

  /// Sync t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ AdminScreenVm l√™n Supabase
  static Future<void> syncAllProductsToSupabase(
      Map<String, List<Product>> productsByFilter) async {
    try {
      debugPrint('B·∫Øt ƒë·∫ßu sync ${productsByFilter.length} categories...');

      int totalProducts = 0;
      int successCount = 0;
      int errorCount = 0;

      for (final category in productsByFilter.keys) {
        final products = productsByFilter[category]!;
        debugPrint(
            'ƒêang sync category: $category (${products.length} s·∫£n ph·∫©m)');

        for (final product in products) {
          try {
            totalProducts++;

            // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i ch∆∞a (d·ª±a v√†o t√™n v√† category)
            final existingProduct = await SupabaseService.from(_tableName)
                .select('id')
                .eq('name', product.name)
                .eq('category', category)
                .maybeSingle();

            if (existingProduct != null) {
              debugPrint(
                  'S·∫£n ph·∫©m ${product.name} (category: $category) ƒë√£ t·ªìn t·∫°i, b·ªè qua');
              continue;
            }

            // X√°c ƒë·ªãnh ·∫£nh asset path - product.image ƒë√£ l√† full path
            String assetPath = product.image;

            // Ki·ªÉm tra xem c√≥ ph·∫£i best seller kh√¥ng
            bool isBestSeller = productsByFilter[S.current.best_seller]
                    ?.any((p) => p.id == product.id) ??
                false;

            await addProduct(
              product: product,
              category: category,
              categoryId: 1,
              imageAssetPath: assetPath,
              isBestSeller: isBestSeller,
            );

            successCount++;
            debugPrint('‚úÖ Sync th√†nh c√¥ng: ${product.name}');

            // Delay nh·ªè ƒë·ªÉ tr√°nh rate limit
            await Future.delayed(const Duration(milliseconds: 100));
          } catch (e) {
            errorCount++;
            debugPrint('‚ùå L·ªói sync s·∫£n ph·∫©m ${product.name}: $e');
          }
        }
      }

      debugPrint(
          'üéâ Ho√†n th√†nh sync: $successCount/$totalProducts s·∫£n ph·∫©m th√†nh c√¥ng, $errorCount l·ªói');
    } catch (e) {
      debugPrint('L·ªói sync t·ªïng th·ªÉ: $e');
      rethrow;
    }
  }

  /// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ Supabase
  static Future<List<Map<String, dynamic>>> getAllProducts() async {
    try {
      final response = await SupabaseService.from(_tableName)
          .select('*')
          .order('created_at', ascending: false);

      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      debugPrint('L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m: $e');
      rethrow;
    }
  }

  /// L·∫•y ch·ªâ nh·ªØng s·∫£n ph·∫©m active t·ª´ Supabase
  static Future<List<Map<String, dynamic>>> getActiveProducts() async {
    try {
      final response = await SupabaseService.from(_tableName)
          .select('*')
          .eq('is_active', true)
          .order('created_at', ascending: false);

      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      debugPrint('L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m active: $e');
      rethrow;
    }
  }

  /// L·∫•y s·∫£n ph·∫©m theo category (ch·ªâ nh·ªØng s·∫£n ph·∫©m active)
  /// L·∫•y s·∫£n ph·∫©m theo category (ch·ªâ active)
  static Future<List<Map<String, dynamic>>> getProductsByCategory(
      String category) async {
    try {
      final response = await SupabaseService.client
          .from('products')
          .select('*, categories!inner(is_active)')
          .eq('category', category)
          .eq('is_active', true) // s·∫£n ph·∫©m active
          .eq('categories.is_active', true) // category c≈©ng ph·∫£i active
          .order('id', ascending: true);

      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      debugPrint('L·ªói l·∫•y s·∫£n ph·∫©m theo category $category: $e');
      rethrow;
    }
  }

  /// L·∫•y s·∫£n ph·∫©m best seller (ch·ªâ nh·ªØng s·∫£n ph·∫©m active)
  static Future<List<Map<String, dynamic>>> getBestSellerProducts() async {
    try {
      final response = await SupabaseService.client
          .from('products')
          .select('*, categories!inner(id, name, is_active)')
          .eq('is_best_seller', true)
          .eq('is_active', true)
          .eq('categories.is_active', true)
          .order('id', ascending: true);


      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      debugPrint('L·ªói l·∫•y s·∫£n ph·∫©m best seller: $e');
      rethrow;
    }
  }
  /// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  static Future<Map<String, dynamic>> updateProduct({
    required int productId,
    String? name,
    double? price,
    String? country,
    String? category,

    bool? isBestSeller,
    bool? isActive,
    File? newImageFile,
    Uint8List? newImageBytes,
  }) async {
    try {
      final updateData = <String, dynamic>{};

      if (name != null) updateData['name'] = name;
      if (price != null) updateData['price'] = price;
      if (country != null) updateData['country'] = country;
      if (category != null) updateData['category'] = category;

      if (isBestSeller != null) updateData['is_best_seller'] = isBestSeller;
      if (isActive != null) updateData['is_active'] = isActive;

      // Upload ·∫£nh m·ªõi n·∫øu c√≥
      if (newImageFile != null) {
        final fileName =
            'product_${productId}_${DateTime.now().millisecondsSinceEpoch}.png';
        final imageUrl = await uploadImageFromFile(newImageFile, fileName);
        updateData['image_url'] = imageUrl;
        updateData['image_path'] = 'products/$fileName';
      } else if (newImageBytes != null) {
        final fileName =
            'product_${productId}_${DateTime.now().millisecondsSinceEpoch}.png';
        final imageUrl = await uploadImageFromBytes(newImageBytes, fileName);
        updateData['image_url'] = imageUrl;
        updateData['image_path'] = 'products/$fileName';
      }

      updateData['updated_at'] = DateTime.now().toIso8601String();

      final response = await SupabaseService.from(_tableName)
          .update(updateData)
          .eq('id', productId)
          .select()
          .single();

      debugPrint('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng: id $productId');
      return response;
    } catch (e) {
      debugPrint('L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m id $productId: $e');
      rethrow;
    }
  }

  /// X√≥a s·∫£n ph·∫©m theo ID
  static Future<void> deleteProduct(int productId) async {
    try {
      // L·∫•y th√¥ng tin ·∫£nh tr∆∞·ªõc khi x√≥a
      final product = await SupabaseService.from(_tableName)
          .select('image_path')
          .eq('id', productId)
          .maybeSingle();

      // X√≥a s·∫£n ph·∫©m kh·ªèi database
      await SupabaseService.from(_tableName).delete().eq('id', productId);

      // X√≥a ·∫£nh kh·ªèi storage n·∫øu c√≥
      if (product != null && product['image_path'] != null) {
        try {
          await SupabaseService.deleteFile(
            bucket: _bucketName,
            path: product['image_path'],
          );
        } catch (e) {
          debugPrint('Kh√¥ng th·ªÉ x√≥a ·∫£nh: $e');
        }
      }

      debugPrint('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng: ID $productId');
    } catch (e) {
      debugPrint('L·ªói x√≥a s·∫£n ph·∫©m ID $productId: $e');
      rethrow;
    }
  }

  /// X√≥a s·∫£n ph·∫©m theo key (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©)
  /// L∆∞u √Ω: V√¨ b·∫£ng kh√¥ng c√≥ c·ªôt 'key', method n√†y s·∫Ω x√≥a theo 'id'
  static Future<void> deleteProductByKey(int productKey) async {
    try {
      // L·∫•y th√¥ng tin ·∫£nh tr∆∞·ªõc khi x√≥a
      final product = await SupabaseService.from(_tableName)
          .select('image_path')
          .eq('id', productKey) // S·ª≠ d·ª•ng 'id' thay v√¨ 'key'
          .maybeSingle();

      // X√≥a s·∫£n ph·∫©m kh·ªèi database
      await SupabaseService.from(_tableName)
          .delete()
          .eq('id', productKey); // S·ª≠ d·ª•ng 'id' thay v√¨ 'key'

      // X√≥a ·∫£nh kh·ªèi storage n·∫øu c√≥
      if (product != null && product['image_path'] != null) {
        try {
          await SupabaseService.deleteFile(
            bucket: _bucketName,
            path: product['image_path'],
          );
        } catch (e) {
          debugPrint('Kh√¥ng th·ªÉ x√≥a ·∫£nh: $e');
        }
      }

      debugPrint('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng: id $productKey');
    } catch (e) {
      debugPrint('L·ªói x√≥a s·∫£n ph·∫©m id $productKey: $e');
      rethrow;
    }
  }

  /// X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m (d√πng ƒë·ªÉ reset database)
  static Future<void> clearAllProducts() async {
    try {
      await SupabaseService.from(_tableName)
          .delete()
          .neq('id', '00000000-0000-0000-0000-000000000000');
      debugPrint('ƒê√£ x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m');
    } catch (e) {
      debugPrint('L·ªói x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m: $e');
      rethrow;
    }
  }

  /// Convert t·ª´ Supabase data sang Product model
  static Product fromSupabaseData(Map<String, dynamic> data) {
    return Product(
      id: data['id'] ?? 0,
      name: data['name'],
      nameEnglish: data['name_english'] ?? '',
      country: data['country'] ?? '',
      price: (data['price'] as num?)?.toDouble() ?? 0.0,
      image: data['image_url'] ?? '', // D√πng URL thay v√¨ asset path
      category: data['category'] ?? '',
      categoryId: data['category_id'],
      isBestSeller: data['is_best_seller'] ?? false,
      isActive: data['is_active'] ?? true,
    );
  }

  /// ·∫®n s·∫£n ph·∫©m (khi h·∫øt h√†ng)
  static Future<void> hideProduct(int productId) async {
    try {
      await SupabaseService.from(_tableName).update({
        'is_active': false,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', productId);

      debugPrint('·∫®n s·∫£n ph·∫©m th√†nh c√¥ng: ID $productId');
    } catch (e) {
      debugPrint('L·ªói ·∫©n s·∫£n ph·∫©m ID $productId: $e');
      rethrow;
    }
  }

  /// Hi·ªán s·∫£n ph·∫©m (khi c√≥ h√†ng tr·ªü l·∫°i)
  static Future<void> showProduct(int productId) async {
    try {
      await SupabaseService.from(_tableName).update({
        'is_active': true,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', productId);

      debugPrint('Hi·ªán s·∫£n ph·∫©m th√†nh c√¥ng: ID $productId');
    } catch (e) {
      debugPrint('L·ªói hi·ªán s·∫£n ph·∫©m ID $productId: $e');
      rethrow;
    }
  }

  /// Toggle tr·∫°ng th√°i active c·ªßa s·∫£n ph·∫©m
  static Future<void> toggleProductStatus(int productId) async {
    try {
      // L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i
      final currentProduct = await SupabaseService.from(_tableName)
          .select('is_active')
          .eq('id', productId)
          .single();

      final currentStatus = currentProduct['is_active'] ?? true;

      // Toggle tr·∫°ng th√°i
      await SupabaseService.from(_tableName).update({
        'is_active': !currentStatus,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', productId);

      debugPrint(
          'Toggle tr·∫°ng th√°i s·∫£n ph·∫©m th√†nh c√¥ng: ID $productId (${!currentStatus ? 'hi·ªán' : '·∫©n'})');
    } catch (e) {
      debugPrint('L·ªói toggle tr·∫°ng th√°i s·∫£n ph·∫©m ID $productId: $e');
      rethrow;
    }
  }

  /// L·∫•y s·∫£n ph·∫©m theo tr·∫°ng th√°i active
  static Future<List<Map<String, dynamic>>> getProductsByStatus(
      {bool? isActive}) async {
    try {
      var query = SupabaseService.from(_tableName).select('*');

      if (isActive != null) {
        query = query.eq('is_active', isActive);
      }

      final response = await query.order('created_at', ascending: false);

      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      debugPrint('L·ªói l·∫•y s·∫£n ph·∫©m theo tr·∫°ng th√°i: $e');
      rethrow;
    }
  }

  /// L·∫•y s·∫£n ph·∫©m theo ID
  static Future<Map<String, dynamic>?> getProductById(int productId) async {
    try {
      final response = await SupabaseService.from(_tableName)
          .select('*')
          .eq('id', productId)
          .maybeSingle();

      return response;
    } catch (e) {
      debugPrint('L·ªói l·∫•y s·∫£n ph·∫©m theo ID $productId: $e');
      rethrow;
    }
  }

  /// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho (n·∫øu c·∫ßn)
  static Future<void> updateStock(int productId, int stockQuantity) async {
    try {
      final updateData = <String, dynamic>{
        'stock_quantity': stockQuantity,
        'is_active': stockQuantity > 0, // T·ª± ƒë·ªông ·∫©n n·∫øu h·∫øt h√†ng
        'updated_at': DateTime.now().toIso8601String(),
      };

      await SupabaseService.from(_tableName)
          .update(updateData)
          .eq('id', productId);

      debugPrint(
          'C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng: ID $productId, s·ªë l∆∞·ª£ng: $stockQuantity');
    } catch (e) {
      debugPrint('L·ªói c·∫≠p nh·∫≠t t·ªìn kho ID $productId: $e');
      rethrow;
    }
  }
}
